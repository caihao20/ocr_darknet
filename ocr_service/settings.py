"""
Django settings for pc_extract_entity project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!7)ed=&9oa&6tcrha^f&q@tx^dhakm0$n96qp5c)++3d2%ab@='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ocr_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ocr_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

from ocr_service.service.darknet_ocr.config import ocrPath, textPath, darkRoot, GPU

class InitialNet(object):
    
    """docstring for InitialNet"""
    def __init__(self):
        super(InitialNet, self).__init__()
        self.charactersPred = ' ' + self.read_characters() + '｜ '
        self.ocrNet = self.get_ocr_net()
        self.textNet = self.get_text_net()

    def read_characters(self):
        import json
        p= ocrPath.replace('.weights','.json')
        if os.path.exists(p):
            with open(p,encoding='utf-8')  as f:
                characters = json.loads(f.read())
            return characters
        else:
            return ''

    def get_ocr_net(self):
        if GPU:
            from ocr_service.service.darknet_ocr.dnn.darknet import  load_net
            ocrNet = load_net(ocrPath.replace('.weights','.cfg').encode(),ocrPath.encode(), 0)
        else:
            ocrNet = cv2.dnn.readNetFromDarknet(ocrPath.replace('.weights','.cfg'),ocrPath)
        return ocrNet       

    def get_text_net(self):
        if GPU:
             from ocr_service.service.darknet_ocr.dnn.darknet import  load_net
             textNet = load_net(textPath.replace('.weights','.cfg').encode(),textPath.encode(), 0)
        else:
            textNet   =  cv2.dnn.readNetFromDarknet(textPath.replace('weights','cfg'),textPath)  
        return textNet

        
initial_net = InitialNet()

PARAM = {
    "ocrNet": initial_net.ocrNet, #载入模型
    "textNet": initial_net.textNet, #载入模型
    "charactersPred": initial_net.charactersPred,
}

from ocr_service.service.pc_extract_entity import ExtractEntity
extract_ent = ExtractEntity()




